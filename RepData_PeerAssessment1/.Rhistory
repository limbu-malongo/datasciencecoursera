install.packages("plyr")
if(require(plyr)){
print("plyr installed and loaded")
} else {
stop("could not install plyr")
}
}
total_steps_day <- ddply(activity, .(date), summarise,
total_s = sum(steps, na.rm=T))
#Histogram of the total number of steps taken each day
hist(total_steps_day$total_s)
mean_median_steps_day <- ddply(activity, .(date), summarise,
mean_s = mean(steps, na.rm=T) ,
median_s = median(steps))
View(total_steps_day)
View(mean_median_steps_day)
mean_median_steps_day <- ddply(activity, .(date), summarise,
mean_s = mean(steps) ,
median_s = median(steps))
View(mean_median_steps_day)
?ddply
mean_median_steps_day1 <- ddply(activity, .(date),
mean_s = mean(steps) ,
median_s = median(steps))
View(mean_median_steps_day1)
View(total_steps_day)
?tapply
View(total_steps_day)
mean(total_steps_day$total_s)
total_steps_day <- ddply(activity, .(date), summarise,
total_s = sum(steps), na.rm=TRUE)
View(total_steps_day)
total_steps_day <- ddply(activity, .(date), summarise,
total_s = sum(steps))
View(total_steps_day)
mean(total_steps_day$total_s)
mean(total_steps_day$total_s, na.rm = TRUE)
median(total_steps_day$total_s, na.rm = TRUE)
summary(total_steps_day$total_s, na.rm = TRUE)
summary(total_steps_day$total_s)
#The mean and median total number of steps taken per day
summary(total_steps_day$total_s)
mean(total_steps_day$total_s)
median(total_steps_day$total_s)
mean(total_steps_day$total_s, na.rm=TRUE)
median(total_steps_day$total_s, na.rm=TRUE)
summary(total_steps_day$total_s)
summary(total_steps_day)
average_steps_day <- ddply(activity, .(interval), summarise,
average_s = mean(steps))
View(average_steps_day)
average_steps_day <- ddply(activity, .(interval), summarise,
average_s = mean(steps, na.rm = TRUE))
View(average_steps_day)
View(average_steps_day)
with(data=average_steps_day, plot(interval, average_s, type="l"))
max(average_steps_day$average_s)
t <- max(average_steps_day$average_s)
ttt <- average_steps_day[average_steps_day$average_s==t,]
ttt
#Loading and preprocessing the data
#Checking if the file activity.csv or activity.zip exist in the working directory
#If all of them are missing then it will print the message
#If only "activity.zip" is found it will be unzipped
if (!file.exists("activity.csv")) {
if (!file.exists("activity.zip")) {
stop("Please make sure the file 'activity.csv' or 'activity.zip' file is in the working directory")
} else {
unzip("activity.zip")
}
}
#Loading the data
activity <- read.csv("activity.csv", colClasses=c(NA,"Date",NA))
#Check the structure of the data
str(activity)
#What is mean total number of steps taken per day?
#The codes below will check if the package is installed and load, and if it is not installed it is going
#download plyr, install and load it
#
if(require("plyr")){
print("plyr is loaded correctly")
} else {
print("trying to install plyr")
install.packages("plyr")
if(require(plyr)){
print("plyr installed and loaded")
} else {
stop("could not install plyr")
}
}
total_steps_day <- ddply(activity, .(date), summarise,
total_s = sum(steps))
#mean_steps_day <- ddply(activity, .(date), summarise,
#                        mean_s = mean(steps, na.rm=T))
#The mean total number of steps taken per day
#mean(mean_steps_day$mean_s, na.rm=T)
#Histogram of the total number of steps taken each day
hist(total_steps_day$total_s)
#The mean and median total number of steps taken per day
#mean_median_steps_day <- ddply(activity, .(date), summarise,
#                        mean_s = mean(steps) ,
#                        median_s = median(steps))
#The mean and median total number of steps taken per day
#summary(total_steps_day$total_s)
mean(total_steps_day$total_s, na.rm=TRUE)
median(total_steps_day$total_s, na.rm=TRUE)
summary(total_steps_day$total_s)
What is the average daily activity pattern?
#1. What is mean total number of steps taken per day?
average_steps_day <- ddply(activity, .(interval), summarise,
average_s = mean(steps, na.rm = TRUE))
with(data=average_steps_day, plot(interval, average_s, type="l"))
#2. Which 5-minute interval, on average across all the days in the dataset,
#   contains the maximum number of steps?
t <- max(average_steps_day$average_s)
ttt <- average_steps_day[average_steps_day$average_s==t,]
ttt
#What is the average daily activity pattern?
#Loading and preprocessing the data
#Checking if the file activity.csv or activity.zip exist in the working directory
#If all of them are missing then it will print the message
#If only "activity.zip" is found it will be unzipped
if (!file.exists("activity.csv")) {
if (!file.exists("activity.zip")) {
stop("Please make sure the file 'activity.csv' or 'activity.zip' file is in the working directory")
} else {
unzip("activity.zip")
}
}
#Loading the data
activity <- read.csv("activity.csv", colClasses=c(NA,"Date",NA))
#Check the structure of the data
str(activity)
#What is mean total number of steps taken per day?
#The codes below will check if the package is installed and load, and if it is not installed it is going
#download plyr, install and load it
#
if(require("plyr")){
print("plyr is loaded correctly")
} else {
print("trying to install plyr")
install.packages("plyr")
if(require(plyr)){
print("plyr installed and loaded")
} else {
stop("could not install plyr")
}
}
total_steps_day <- ddply(activity, .(date), summarise,
total_s = sum(steps))
#mean_steps_day <- ddply(activity, .(date), summarise,
#                        mean_s = mean(steps, na.rm=T))
#The mean total number of steps taken per day
#mean(mean_steps_day$mean_s, na.rm=T)
#Histogram of the total number of steps taken each day
hist(total_steps_day$total_s)
#The mean and median total number of steps taken per day
#mean_median_steps_day <- ddply(activity, .(date), summarise,
#                        mean_s = mean(steps) ,
#                        median_s = median(steps))
#The mean and median total number of steps taken per day
#summary(total_steps_day$total_s)
mean(total_steps_day$total_s, na.rm=TRUE)
median(total_steps_day$total_s, na.rm=TRUE)
summary(total_steps_day$total_s)
#What is the average daily activity pattern?
#1. What is mean total number of steps taken per day?
average_steps_day <- ddply(activity, .(interval), summarise,
average_s = mean(steps, na.rm = TRUE))
with(data=average_steps_day, plot(interval, average_s, type="l"))
#2. Which 5-minute interval, on average across all the days in the dataset,
#   contains the maximum number of steps?
t <- max(average_steps_day$average_s)
ttt <- average_steps_day[average_steps_day$average_s==t,]
ttt
install.packages("vim")
install.packages("VIM")
LIBRARY(VIM)
library(VIM)
a <- aggr(activity)
sum(is.na(activity))
sum(complete.cases(activity))
sum(!complete.cases(activity))
which(!complete.cases(activity))
if(require("VIM")){
print("VIM is loaded correctly")
} else {
print("trying to install VIM")
install.packages("VIM")
if(require(VIM)){
print("plyr installed and loaded")
} else {
stop("could not install VIM")
}
}
a <- aggr(activity)
a
barMiss(x)
barMiss(activity)
with(data=average_steps_day, plot(interval, average_s, type="l"))
abline(v=max(average_steps_day$average_s))          # Vertical line at x = 0
t <- max(average_steps_day$average_s)
ttt <- average_steps_day[average_steps_day$average_s==t,]
ttt
ttt <- average_steps_day[average_steps_day$average_s==t,1]
ttt
abline(v=average_steps_day[average_steps_day$average_s==t,1]))          # Vertical line at x = 0
abline(v=max(average_steps_day$average_s))          # Vertical line at x = 0
abline(v=max(average_steps_day[average_steps_day$average_s==t,1]))
abline(v=max(average_steps_day[average_steps_day$average_s==t,1]), col=blue)
abline(v=max(average_steps_day[average_steps_day$average_s==t,1]), col="blue")
with(data=average_steps_day, plot(interval, average_s, type="l"))
#abline(v=max(average_steps_day$average_s))          # Vertical line at x = 0
abline(v=max(average_steps_day[average_steps_day$average_s==t,1]),
col="blue")
a <- aggr(activity)
#Loading and preprocessing the data
#Checking if the file activity.csv or activity.zip exist in the working directory
#If all of them are missing then it will print the message
#If only "activity.zip" is found it will be unzipped
if (!file.exists("activity.csv")) {
if (!file.exists("activity.zip")) {
stop("Please make sure the file 'activity.csv' or 'activity.zip' file is in the working directory")
} else {
unzip("activity.zip")
}
}
#Loading the data
activity <- read.csv("activity.csv", colClasses=c(NA,"Date",NA))
#Check the structure of the data
str(activity)
#What is mean total number of steps taken per day?
#The codes below will check if the package is installed and load, and if it is not installed it is going
#download plyr, install and load it
#
if(require("plyr")){
print("plyr is loaded correctly")
} else {
print("trying to install plyr")
install.packages("plyr")
if(require(plyr)){
print("plyr installed and loaded")
} else {
stop("could not install plyr")
}
}
total_steps_day <- ddply(activity, .(date), summarise,
total_s = sum(steps))
#mean_steps_day <- ddply(activity, .(date), summarise,
#                        mean_s = mean(steps, na.rm=T))
#The mean total number of steps taken per day
#mean(mean_steps_day$mean_s, na.rm=T)
#Histogram of the total number of steps taken each day
hist(total_steps_day$total_s)
#The mean and median total number of steps taken per day
#mean_median_steps_day <- ddply(activity, .(date), summarise,
#                        mean_s = mean(steps) ,
#                        median_s = median(steps))
#The mean and median total number of steps taken per day
#summary(total_steps_day$total_s)
mean(total_steps_day$total_s, na.rm=TRUE)
median(total_steps_day$total_s, na.rm=TRUE)
summary(total_steps_day$total_s)
#What is the average daily activity pattern?
#1. What is mean total number of steps taken per day?
average_steps_day <- ddply(activity, .(interval), summarise,
average_s = mean(steps, na.rm = TRUE))
with(data=average_steps_day, plot(interval, average_s, type="l"))
#abline(v=max(average_steps_day$average_s))          # Vertical line at x = 0
abline(v=max(average_steps_day[average_steps_day$average_s==t,1]),
col="blue")
#2. Which 5-minute interval, on average across all the days in the dataset,
#   contains the maximum number of steps?
t <- max(average_steps_day$average_s)
#ttt <- average_steps_day[average_steps_day$average_s==t,]
ttt <- average_steps_day[average_steps_day$average_s==t,1]
ttt
#Imputing missing values
# Visualizing missing values with "VIM" package
# Idea borrowed from
#http://www.unt.edu/rss/class/Jon/Benchmarks/MissingValueImputation_JDS_Nov2010.pdf
if(require("VIM")){
print("VIM is loaded correctly")
} else {
print("trying to install VIM")
install.packages("VIM")
if(require(VIM)){
print("plyr installed and loaded")
} else {
stop("could not install VIM")
}
}
a <- aggr(activity)
a
#Counting the occurrence of NA
sum(is.na(activity))
## Counting incomplete cases, (rows of a data frame where one or more columns contain NA)
#Borrowed from http://forums.psy.ed.ac.uk/R/P01582/essential-10/
#Count of complete cases in a data frame named 'data'
sum(complete.cases(activity))
# Count of incomplete cases
sum(!complete.cases(activity))
# Which cases (row numbers) are incomplete?
which(!complete.cases(activity))
head(activity)
#Loading and preprocessing the data
#Checking if the file activity.csv or activity.zip exist in the working directory
#If all of them are missing then it will print the message
#If only "activity.zip" is found it will be unzipped
if (!file.exists("activity.csv")) {
if (!file.exists("activity.zip")) {
stop("Please make sure the file 'activity.csv' or 'activity.zip' file is in the working directory")
} else {
unzip("activity.zip")
}
}
#Loading the data
activity <- read.csv("activity.csv", colClasses=c(NA,"Date",NA))
#Check the structure of the data
str(activity)
#What is mean total number of steps taken per day?
#The codes below will check if the package is installed and load, and if it is not installed it is going
#download plyr, install and load it
#
if(require("plyr")){
print("plyr is loaded correctly")
} else {
print("trying to install plyr")
install.packages("plyr")
if(require(plyr)){
print("plyr installed and loaded")
} else {
stop("could not install plyr")
}
}
total_steps_day <- ddply(activity, .(date), summarise,
total_s = sum(steps))
#mean_steps_day <- ddply(activity, .(date), summarise,
#                        mean_s = mean(steps, na.rm=T))
#The mean total number of steps taken per day
#mean(mean_steps_day$mean_s, na.rm=T)
#Histogram of the total number of steps taken each day
hist(total_steps_day$total_s)
#The mean and median total number of steps taken per day
#mean_median_steps_day <- ddply(activity, .(date), summarise,
#                        mean_s = mean(steps) ,
#                        median_s = median(steps))
#The mean and median total number of steps taken per day
#summary(total_steps_day$total_s)
mean(total_steps_day$total_s, na.rm=TRUE)
median(total_steps_day$total_s, na.rm=TRUE)
summary(total_steps_day$total_s)
#What is the average daily activity pattern?
#1. What is mean total number of steps taken per day?
average_steps_day <- ddply(activity, .(interval), summarise,
average_s = mean(steps, na.rm = TRUE))
with(data=average_steps_day, plot(interval, average_s, type="l"))
#abline(v=max(average_steps_day$average_s))          # Vertical line at x = 0
abline(v=max(average_steps_day[average_steps_day$average_s==t,1]),
col="blue")
#2. Which 5-minute interval, on average across all the days in the dataset,
#   contains the maximum number of steps?
t <- max(average_steps_day$average_s)
#ttt <- average_steps_day[average_steps_day$average_s==t,]
ttt <- average_steps_day[average_steps_day$average_s==t,1]
ttt
#Imputing missing values
# Visualizing missing values with "VIM" package
# Idea borrowed from
#http://www.unt.edu/rss/class/Jon/Benchmarks/MissingValueImputation_JDS_Nov2010.pdf
if(require("VIM")){
print("VIM is loaded correctly")
} else {
print("trying to install VIM")
install.packages("VIM")
if(require(VIM)){
print("plyr installed and loaded")
} else {
stop("could not install VIM")
}
}
a <- aggr(activity)
a
#Counting the occurrence of NA
sum(is.na(activity))
## Counting incomplete cases, (rows of a data frame where one or more columns contain NA)
#Borrowed from http://forums.psy.ed.ac.uk/R/P01582/essential-10/
#Count of complete cases in a data frame named 'data'
sum(complete.cases(activity))
# Count of incomplete cases
sum(!complete.cases(activity))
# Which cases (row numbers) are incomplete?
which(!complete.cases(activity))
#Imputing NA's with mean of the interval
#Using impute() from package Hmisc and ddply from package plyr
#
#Loading the Hmisc package
if(require("Hmisc")){
print("Hmisc is loaded correctly")
} else {
print("trying to install Hmisc")
install.packages("Hmisc")
if(require(Hmisc)){
print("Hmisc installed and loaded")
} else {
stop("could not install Hmisc")
}
}
head(activity)
activity_imp <- ddply(activity, "interval", mutate, imputed.steps = impute(steps, mean))
head(activity_imp)
activity_imp2 <- activity_imp[,c(4,2,3)]
head(activity_imp2)
activity_imp2 <- activity_imp[order(interval),c(4,2,3)]
activity_imp2 <- activity_imp[order(activity_imp$interval),c(4,2,3)]
head(activity_imp2)
activity_imp2 <- activity_imp[order(activity_imp$date),c(4,2,3)]
head(activity_imp2)
abline(v=max(average_steps_day[average_steps_day$average_s==t,1]),
col="blue")
with(data=average_steps_day, plot(interval, average_s, type="l",
main = "mean total number of steps taken per day",
ylab = "Average Steps"))
#abline(v=max(average_steps_day$average_s))          # Vertical line at x = 0
abline(v=max(average_steps_day[average_steps_day$average_s==t,1]),
col="blue")
activity_imp <- activity_imp[order(activity_imp$date),c(4,2,3)]
head(activity_imp)
imp_total_steps_day <- ddply(activity_imp, .(date), summarise,
imp_total_s = sum(imputed.steps))
head(imp_total_steps_day)
summary(imp_total_steps_day$imp_total_s)
summary(total_steps_day$total_s)
hist(imp_total_steps_day$imp_total_s)
hist(total_steps_day$total_s,
main = "Total number of steps taken each day for Imputed Data",
xlab = "Total Steps")
#Histogram of the total number of steps taken each day
hist(imp_total_steps_day$imp_total_s,
main = "Total number of steps taken each day for Imputed Data",
xlab = "Total Steps")
summary(imp_total_steps_day)
summary(total_steps_day)
#Histogram of the total number of steps taken each day
hist(total_steps_day$total_s,
main = "Total number of steps taken each day",
xlab = "Total Steps")
#Ploting the two histograms side by side
mfrow=c(2,1)
#Histogram of the total number of steps taken each day
hist(total_steps_day$total_s,
main = "Total number of steps taken each day",
xlab = "Total Steps")
#Histogram of the total number of steps taken each day
hist(imp_total_steps_day$imp_total_s,
main = "Total number of steps taken each day for Imputed Data",
xlab = "Total Steps")
#Histogram of the total number of steps taken each day
hist(imp_total_steps_day$imp_total_s,
main = "Total number of steps taken each day for Imputed Data",
xlab = "Total Steps")
#Ploting the two histograms side by side
mfrow=c(1,2)
#Histogram of the total number of steps taken each day
hist(total_steps_day$total_s,
main = "Total number of steps taken each day",
xlab = "Total Steps")
#Histogram of the total number of steps taken each day
hist(imp_total_steps_day$imp_total_s,
main = "Total number of steps taken each day for Imputed Data",
xlab = "Total Steps")
#Ploting the two histograms side by side
mfrow=c(1,2)
#Histogram of the total number of steps taken each day
hist(total_steps_day$total_s,
main = "Total number of steps taken each day",
xlab = "Total Steps")
#Histogram of the total number of steps taken each day
hist(imp_total_steps_day$imp_total_s,
main = "Total number of steps taken each day for Imputed Data",
xlab = "Total Steps")
par(mfrow=c(1,2))
#Histogram of the total number of steps taken each day
hist(total_steps_day$total_s,
main = "Total number of steps taken each day",
xlab = "Total Steps")
#Histogram of the total number of steps taken each day for imputed data
hist(imp_total_steps_day$imp_total_s,
main = "Total number of steps taken each day for Imputed Data",
xlab = "Total Steps")
#Ploting the two histograms side by side
par(mfrow=c(1,2))
#Histogram of the total number of steps taken each day
hist(total_steps_day$total_s,
main = "Total Steps per Day (NA's Ignored)",
xlab = "Total Steps")
#Histogram of the total number of steps taken each day for imputed data
hist(imp_total_steps_day$imp_total_s,
main = "Imputed Data",
xlab = "Total Steps")
#Ploting the two histograms side by side
par(mfrow=c(1,2))
#Histogram of the total number of steps taken each day
hist(total_steps_day$total_s,
main = "NA's Ignored Data",
xlab = "Total Steps")
#Histogram of the total number of steps taken each day for imputed data
hist(imp_total_steps_day$imp_total_s,
main = "Imputed Data",
xlab = "Total Steps")
```
There are 17568 records and 3 variables. The data contain 2304 missing values.
